{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Me","text":""},{"location":"#introduction","title":"Introduction","text":"<p>A skilled professional with an overall experience of 11 Years in IT Domain (Telecom, HealthCare &amp; Banking), expertise in Design and Development, Cloud computing, DevOps tools and methodologies, Configuration management, Infrastructure Testing/Automation, Vulnerability  management and Patch management</p>"},{"location":"#certifications","title":"Certifications","text":"<ul> <li>Microsoft Azure Certified Developer Associate (AZ900 and AZ204)</li> </ul>"},{"location":"#summary","title":"Summary","text":"<ul> <li>Having good experience in AWS services / Serverless / Microservices architecture and application deployment on Cloud/OnPrem using DevOps tools and techniques.</li> <li>Significant experience in development of CICD pipeline using Gitlab/Jenkins</li> <li>Expertise in Terraform IAC tools, involved in development of manifests/modules.</li> <li>Significant experience in development of compliance scripts, Automation scripts, Configuration management scripts using  Ansible/HPSA. </li> <li>Hands on experience in developing Ansible Playbooks, Job templates, Filter Plugins, Call back plugins, inventory, and  credentials management.</li> <li>Hands on experience in managing RedHat Ansible tower Enterprise.</li> <li>Hands on experience in developing Python libraries.</li> <li>Experienced in Build Release management, shell/Bash scripting, Linux Administration.</li> <li>Good Experience in containerization tools like Docker/K8s.</li> <li>Experience in integrating Atlassian Tools like Jira, Confluence, Hipchat with Ansible/Jenkins or Python custom libraries.</li> <li>Handled deployments for higher environments in Cloud/on-prem, infra management and Vulnerability Remediation.</li> <li>Handled build/implementation/QA/Migration of two enterprise Data center in UK/US.</li> <li>Significant understanding and exposure on core Infrastructure technologies (Platform, Storage &amp; Backup, Networking. etc.)  with HA and DR management</li> <li>Partner with Senior Architect and other stake holders and defines solution architecture based on functional and nonfunctional requirements.</li> <li>Consult, guides solution team on medium and large projects.</li> <li>Expert knowledge base on emerging technologies, and leading trends.</li> </ul>"},{"location":"#technical-skills","title":"Technical Skills","text":"Skills Set Technologies Cloud Computing AWS, Azure and OpenStack Programming Skills Python, Java Operating Systems Linux, Windows Configuration/ Provisioning Terraform, Ansible, Puppet, Vagrant Version Control GIT, ClearCase CI/CD Tools Cloudbees, Jenkins Containerization/Orchestration Docker, Kubernetes Scripting Language Shell, Ruby, Groovy, YAML Collaboration Tools Jira Monitoring Tools CloudWatch / Vmware Hyperic/ Nagios Build/Packaging tool Maven, ANT"},{"location":"tutorials/AWS/containers/AWS%20elastic%20container%20service/","title":"AWS elastic container services","text":""},{"location":"tutorials/AWS/containers/AWS%20elastic%20container%20service/#elastic-container-services-has-two-launch-types","title":"Elastic container services has two launch types:","text":"<ul> <li>EC2</li> <li>Fargate</li> </ul>"},{"location":"tutorials/AWS/containers/AWS%20elastic%20container%20service/#differences-between-ec2-launch-type-and-fargate","title":"Differences between EC2 launch type and Fargate","text":"EC2 Faragate Underlying Infratucture will be managed by us Underlying infrastructure will be managed by AWS Need to sping up servers and install docker Follows serverless architecture, instances are readily available with everything installed ECS agent needs to be installed to communicate with the control plane not required as the cluster is managed by ECS Pay for EC2 instances Pay only for what we use"},{"location":"tutorials/AWS/containers/AWS%20elastic%20container%20service/#ecs-components","title":"ECS Components","text":""},{"location":"tutorials/AWS/containers/AWS%20elastic%20container%20service/#ecs-task-definition-file","title":"ECS Task Definition File","text":"<ul> <li>Its a blueprint describing how a container should launch</li> <li>Its similar to docker compose file</li> <li>CPU and memory definitions can be defined inside the task defintion file</li> <li>Image/ports/volume details will be defined in this file</li> </ul>"},{"location":"tutorials/AWS/containers/AWS%20elastic%20container%20service/#ecs-task","title":"ECS Task","text":"<ul> <li>Its an instance of Task Definition file</li> <li>Its a running container</li> </ul>"},{"location":"tutorials/AWS/containers/AWS%20elastic%20container%20service/#ecs-service","title":"ECS Service","text":"<ul> <li>A service ensures certain number of tasks(replicas) are running at all the times</li> </ul>"},{"location":"tutorials/AWS/containers/AWS%20elastic%20container%20service/#load-balancer","title":"Load Balancer","text":"<ul> <li>A load balancer can be assigned to route external traffic to your containers</li> </ul>"},{"location":"tutorials/AWS/containers/AWS%20elastic%20container%20service/#launching-a-nodejs-container-from-docker-hub-in-the-ecs-fargate","title":"Launching a nodejs container from docker hub in the ECS Fargate","text":"<ol> <li>Logon to AWS management console and search for ECS     </li> <li>Select ECS, click on GetStarted and select configure for custom docker image from docker hub      </li> <li>Leave task definition to defaults     </li> <li>Define the service, leave to default for now. You can modify the number of running instances required here     </li> <li>Configure cluster name     </li> <li>Review the task definition, Service and cluster details and click next     </li> <li>Click on create and wait for the status to complete     </li> <li>Gather IP information from clusters -&gt; tasks and open nginx in browser      </li> </ol>"},{"location":"tutorials/mkdocs-material/setup/","title":"Setup","text":""},{"location":"tutorials/mkdocs-material/setup/#steps-to-setup-the-environment","title":"Steps to setup the environment","text":"CLI commands<pre><code># Create a new virtuale env\npython -m venv venv\n\n# Actiavte the virtual env\n.\\venv\\Scripts\\activate\n\n# Install the mkdocs material library\npip install mkdocs-material\n\n# Create a new site\nmkdocs new .\n\n# Publish the site\nmksdocs serve\n\n#Update the theme to mkdocs from default in mkdocs.yml\n# Does a github push to remote repository\nmkdocs gh-deploy\n</code></pre>"}]}